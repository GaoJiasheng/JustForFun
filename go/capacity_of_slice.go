package main

import "fmt"

func main() {
	a := []int{0}
	for i := 0; i < 35; i++ {
		a = append(a, i)
		b := a[i:]
		fmt.Println(cap(a), len(a), cap(b), len(b), " --- ", a)
	}
}

/*
cap成2^n在增长
len取决于我们定义的slice
对于一个slice切片，得到的slice，会继承他的尾标(最后元素)以及cap

2 2 2 2  ---  [0 0]
4 3 3 2  ---  [0 0 1]
4 4 2 2  ---  [0 0 1 2]
8 5 5 2  ---  [0 0 1 2 3]
8 6 4 2  ---  [0 0 1 2 3 4]
8 7 3 2  ---  [0 0 1 2 3 4 5]
8 8 2 2  ---  [0 0 1 2 3 4 5 6]
16 9 9 2  ---  [0 0 1 2 3 4 5 6 7]
16 10 8 2  ---  [0 0 1 2 3 4 5 6 7 8]
16 11 7 2  ---  [0 0 1 2 3 4 5 6 7 8 9]
16 12 6 2  ---  [0 0 1 2 3 4 5 6 7 8 9 10]
16 13 5 2  ---  [0 0 1 2 3 4 5 6 7 8 9 10 11]
16 14 4 2  ---  [0 0 1 2 3 4 5 6 7 8 9 10 11 12]
16 15 3 2  ---  [0 0 1 2 3 4 5 6 7 8 9 10 11 12 13]
16 16 2 2  ---  [0 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14]
32 17 17 2  ---  [0 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15]
32 18 16 2  ---  [0 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16]
32 19 15 2  ---  [0 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17]
32 20 14 2  ---  [0 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18]
32 21 13 2  ---  [0 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19]
32 22 12 2  ---  [0 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20]
32 23 11 2  ---  [0 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21]
32 24 10 2  ---  [0 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22]
32 25 9 2  ---  [0 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23]
32 26 8 2  ---  [0 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24]
32 27 7 2  ---  [0 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25]
32 28 6 2  ---  [0 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26]
32 29 5 2  ---  [0 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27]
32 30 4 2  ---  [0 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28]
32 31 3 2  ---  [0 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
32 32 2 2  ---  [0 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30]
64 33 33 2  ---  [0 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31]
64 34 32 2  ---  [0 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32]
64 35 31 2  ---  [0 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33]
64 36 30 2  ---  [0 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34]
*/
